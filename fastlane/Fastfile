origin_branch = "origin/master"
owner_name = "Ecommpay-1"
destinations_group = "Collaborators"
app_names = {"ecmp" => "mSDK-Android-UI"}
paths = {
  "ecmp" => "./mobile-sdk-android-ui-sample/build/outputs/apk/ecommpay/debug/mobile-sdk-android-ui-sample-ecommpay-debug.apk",
}
gradle_tasks = {"ecmp" => "assembleEcommpayDebug"}
lib_env_names = {"ecmp" => "SDK_VERSION_NAME"}

default_platform(:android)
platform :android do

  desc "Upload Test application to Appcenter"
  lane :appcenter do |options|
    skip_docs
    ignore_dirty = options[:ignore_dirty] || false
    brand = options[:brand]   
    if brand.nil?
      UI.user_error!("Please specify brand like brand:ecmp")
    end
    if !ignore_dirty
      ensure_git_status_clean(
        show_uncommitted_changes: true,
        show_diff: true
      )
    end

    is_release_branch, version_name, build_version, changelog = get_current_branch_info()

    if !is_release_branch #for feature branch get build number from appcenter
      begin
        last_appcenter_version = appcenter_fetch_version_number(
          api_token: ENV["APPCENTER_TOKEN"],
          owner_name: owner_name,
          app_name: app_names[brand]
        )
  
        build_version = last_appcenter_version["build_number"].to_i + 1
      rescue Exception => e        
      end
    end  
    
    ENV[lib_env_names[brand]] = version_name
    
    gradle(
      task: ":mobile-sdk-android-ui-sample:#{gradle_tasks[brand]}",
      properties: {
          "android.injected.version.code" => build_version,
          "android.injected.version.name" => version_name
      }
    )

    commit = last_git_commit
    release_notes = "Build from\r\n\r\nCommit: https://webstash.ecommpay.com/projects/PR2/repos/mobile-sdk-android-ui/commits/#{commit[:commit_hash]}\r\n\r\nCommits:\r\n#{changelog}"

    appcenter_upload(
      api_token: ENV["APPCENTER_TOKEN"],
      file: paths[brand],
      owner_name: owner_name,
      app_name: app_names[brand],
      destinations: destinations_group,
      release_notes: release_notes,
      notify_testers: false
    )

    ENV[lib_env_names[brand]] = nil
  end
  
  desc "Check msdk flow constratints"
  lane :check_flow do |options|
    ignore_dirty = options[:ignore_dirty] || false    
    skip_docs
    #check if has not commited changes
    if !ignore_dirty
      ensure_git_status_clean(
        show_uncommitted_changes: true,
        show_diff: true
      )
    end

    is_release_branch, version_name, build_value, changelog = get_current_branch_info()

  end 

end

def search_last_build_tag(**args)
  version_digits = args[:current_version_name].split('.')
  #get version digits
  patch = version_digits[2].to_i
  minor = version_digits[1].to_i
  major = version_digits[0].to_i

  #try to find
  for majorCounter in (major).downto(1)
    for minorCounter in (minor).downto(0)
      for patchCounter in (patch).downto(0)
        tag = "#{majorCounter}.#{minorCounter}.#{patchCounter}"
        if (tag == args[:current_version_name] || patchCounter == 0) #ignore current
          next
        end
        search_tag_pattern =  "v#{majorCounter}.#{(minorCounter > 0 ? minorCounter : "*")}.#{(patchCounter > 0 ? patchCounter : "*")}*"
        UI.message("Searching for tag #{search_tag_pattern}")
        searched_tag = last_git_tag(pattern: search_tag_pattern)
        if !searched_tag.nil?
          return searched_tag
        end
      end
    end
  end
  return nil
end

def get_current_branch_info()
  current_branch_name = git_branch

  if current_branch_name == "dev"
    UI.user_error!("You are on developer branch. You can only create feture branch")
  end

  branch_type = current_branch_name.split('/').first
  branch_name = current_branch_name.split('/').last.split('_').first
  #for build branch another naming  
  is_release_branch = branch_name.start_with?("build")  ||  branch_type == "release"
  #get version name from branch
  version_name = branch_name
  UI.success(is_release_branch ? "You are on BUILD branch" : "You are on FEATURE branch")
  if is_release_branch
    version_name = current_branch_name.split('/').last.split('_').last
  end
  UI.success("BRANCH version name is #{version_name}")
  
  changelog = ""
  build_value = 1
  #check release branch flow
  if is_release_branch
    #get commit tags
    contains_command_result = sh(command: "git tag --points-at")

    if contains_command_result.empty?
      UI.user_error!("Please set build tag like v1.1.1(1)")
    end

    #parse tags to array
    current_commit_tags_list = contains_command_result.split(/\n/)
    if current_commit_tags_list.length() > 1 #ignore more than 1 tag !!!!
      UI.user_error!("You can not set more than one TAG")
    end

    #get current tag (first tag)
    current_tag = current_commit_tags_list.first
    if !current_tag.start_with?("v")
      UI.user_error!("Wrong build TAG. Must be like v1.1.1")
    end

    #get version name and build number from tag
    tag_version_name = current_tag.split('(').first.delete! 'v'
    tag_version_build = current_tag.split('(').last.delete! ')'
    UI.success("TAG version name is #{tag_version_name}")
    if tag_version_build.nil?
      UI.user_error!("Can not parse TAG build value from #{current_tag}")
    end
    UI.success("TAG build value is #{tag_version_build}")
    build_value = tag_version_build

    #compare tag and branch name
    if tag_version_name != version_name
      UI.user_error!("BRANCH #{version_name} and TAG #{tag_version_name} version names are different")
    end
    previous_build_tag = search_last_build_tag(current_version_name:tag_version_name)
    if !previous_build_tag.nil?
      UI.success("Previuos build TAG is #{previous_build_tag}")
      changelog = changelog_from_git_commits(
        quiet: true,
        merge_commit_filtering: "exclude_merges",
        between: [previous_build_tag, current_tag],
        pretty: "- (%ae) %s"
      )
      UI.message(changelog)
    else
      UI.error("Previuos build TAG not found. Imposible to create changelog")
    end  
  else #fature branch
    changelog = changelog_from_git_commits(
      quiet: true,
      merge_commit_filtering: "exclude_merges",
      between: ["origin/dev", "HEAD"],
      pretty: "- (%ae) %s"
    )    
    UI.message(changelog)
  end

  return is_release_branch, version_name, build_value, changelog
end    

